generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  fullName      String           @db.VarChar(80)
  email         String           @unique @db.VarChar(150)
  password      String           @db.VarChar(255) @default("NO_PASSWORD_AUTH")
  role          Role             @default(USER)
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts Account[]
  projectsUsers Projects_users[]
  taskUser      TaskAssignment[]
  
  

}



model Projects {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String
  status      Status_project   @default(ESTABLISHED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  projects    Projects_users[]
  tasks       Task[]
}

model Projects_users {
  userId    Int
  projectId Int
  role      Role     @default(USER)
  joinedAt  DateTime @default(now())
  projects  Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, projectId])
}

model Account {
  userId             Int
  providerType       String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
  
  @@id([provider, providerAccountId])
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String
  status      Status   @default(PROGRESS)
  priority    Priority @default(MEDIUM)
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignedTo  TaskAssignment[]
  
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TaskAssignment { 
  taskId Int 
  userId Int 
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) 
  @@id([taskId, userId]) 
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status_project {
  ESTABLISHED
  PROGRESS
  COMPLETED
}
