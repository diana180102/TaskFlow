// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status_project {
  ESTABLISHED
  PROGRESS
  COMPLETED
}


model Users {
  id Int @id @default(autoincrement())
  fullName String @db.VarChar(80)
  email String @unique @db.VarChar(80)
  password String  @db.VarChar(255)
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projectsUsers Projects_users[]
  providersUser Account[]
  taskUser Task[]
}

model Projects {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String 
  status Status_project @default(ESTABLISHED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects Projects_users[]
  tasks Task[]
}

model Projects_users{
  userId Int 
  projectId Int
  role Role @default(USER)
  joinedAt DateTime @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projects Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([userId, projectId]) 
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               Users     @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Task{
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  description String 
  status Status @default(PROGRESS)
  priority Priority @default(MEDIUM)  
  projectId Int
  assignedTo Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [assignedTo], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

